{"type":"data","nodes":[null,{"type":"data","data":[{"metadata":1,"content":13},{"authorId":2,"slug":3,"tags":4,"title":9,"imageUrl":10,"datePublished":11,"readTime":12},"orville-daley","programming-mecannum-wheels",[5,6,7,8],"programming","robot","drivetrain","chassis","Programming Mecanum Wheels","mecannum","11 December 2022","5","## The Physics of Mecanum\nMecanum wheels are a unique kind of wheel that, in contrast to conventional wheels, allow for mobility and holonomic strafing. They are made up of a number of rubber rollers that have been turned 45 degrees to the left or right.\n\nIn a typical mecanum drivetrain, sideways motion is produced by turning the wheels on one diagonal in the opposite direction from the wheels on the other diagonal. These wheel motions may be combined to move the vehicle in any direction and make it rotate in any direction.\n\nThe four mecanum wheels in a typical mecanum drive system are arranged in a \"X\" pattern. This indicates that when viewed from above, the rollers are inclined toward the center. The force vectors generated by the offset rollers can be summed and equations for movements in all directions can be derived. \n\n\u003Cimg src=\"https:\u002F\u002Fgm0.org\u002Fen\u002Flatest\u002F_images\u002Fmecanum-drive-force-diagram.png\" alt=\"Mecanum Drivetrain\"\nstyle=\"margin: auto\" \u002F\u003E\n\nVectors 1, 2, 3, and 4 in the figure above represent the force vectors produced by the mecanum wheels when the chassis is told to move toward the top of the picture. Every motor is moving ahead. Their X and Y components are shown by the blue and red lines, respectively.\n\n\u003E **Note**\n\u003E DO NOT HARDCODE THE WHEEL MOVEMENTS, THESE CAN BE PROGRAMMATICALLY COMPUTED\n\n\u003E **Note**\n\u003E It is important to note that because of friction, perfect movement isn’t possible in every direction.\n\n## Deriving Mecanum Control Equations\n\n#### Direction\nJoysticks can be used to input x and y coordinates. You're interested in the direction the joystick is pointing. This may be done by determining the inverse tangent of y\u002Fx. Angles outside the first quadrant of the unit circle must be corrected. Fortunately, you may avoid this problem by substituting the function \"atan2\" for the common \"atan\" used in most programming languages.\n\n```python\n\tSET x TO gamepad.left_stick_x\n\tSET y TO -gamepad.left_stick_y  #The y axis of the joystick is flipped with regards to the cartesian plane.\n\n\tSET theta TO ATAN2( y, x )\n```\n#### Magnitude\nTo identify the direction the joystick was pointing, you used trigonometry. The magnitude is determined by finding the hypotenuse of the same triangle. The simplest approach is the Pythagorean theorem, which says that a+b+c=2. By multiplying the square root of the joystick's x and y coordinates, it is possible to determine the length of the hypotenuse.\n\n#### Adding Turn\nMost of the work has been done at this point, everything just needs to be put together and a few tweaks need to be made. The code you write should use the joystick x and y to obtain an angle, and the length of the hypotenuse of the triangle that the x and y coordinates make (the magnitude).\n\nNow the robot has the ability to move laterally in any direction—almost. For most robots, in order to work right, the 2 wheels on one side of the robot need to be inverted because they face the opposite direction. \n\n\u003E **Note**\n\u003E Set one side of the robot’s wheels to be. If after inverting the right wheels the robot is always going backwards then try inverting the left side instead.\n\nFinally, the robot can move laterally and only needs to rotate. Fortunately, the robot can be easilyg horizontal movement t programmed to turn, even at the same time as it’s driving. We will use a second joystick for this purpose, usino turn the robot (the x-axis).\n\nActually, it's rather simple. If the turn value is applied to the lateral movement value, each wheel will turn smoothly. A motor controller can only take values up to 1 (or -1), which is the only problem. Any larger value just scales down to 1, which will have an impact on our outcomes - distorting the robot’s movements.\n\nIn order to make the largest number one, all must be scaled by the same amount. The absolute value of the biggest (or smallest, if on the negative side) number is what makes this factor simple to find. The drive will function now if you simply divide the value for each wheel by this factor.\n\n## The Pseudocode\n``` python\nSTART\n\t# Remember one side of the robot's wheel should be reversed\n\n\n\tSET x TO gamepad.left_stick_x\n\tSET y TO -gamepad.left_stick_y # The y axis of the joystick is flipped with regards to the cartesian plane.\n\n\tSET turn TO gamepad.right_stick_x\n\n\tSET theta TO ATAN2( x, y ) - PI\u002F4 # Get the angle of the polar coordinates for (x,y). Translate -45 degrees\n\tpower \u003C- square root of (x^2 + y^2) # Get the length of the hypotenuse\n\t\n\t\n\tSET leftFront to power * COS(theta) + turn\n\tSET rightFront to power * SIN(theta) - turn\n\tSET leftBack to power * SIN(theta) + turn\n\tSET rightBack to power * COS(theta) - turn\n\n\t\n# Scale all values to be in range [1,-1]\n\tSET max TO MAX( ABSOLUTE( leftFront, rightFront, leftBack, rightBack ) )\n \nSET leftFront to leftFront \u002F max\nSET rightFront to rightFront \u002F max\nSET leftBack to leftBack \u002F max\nSET rightBackto rightBack \u002F max\n\n\nSTOP.\n```\n\n### Citations and Additional Resources\n\n```\nhttps:\u002F\u002Fwww.youtube.com\u002Fwatch?v=gnSW2QpkGXQ\nhttps:\u002F\u002Fwww.youtube.com\u002Fwatch?v=Xrc0l4TDnyw\nhttps:\u002F\u002Fwww.youtube.com\u002Fwatch?v=Ne09Y72zW_Y\nhttps:\u002F\u002Fseamonsters-2605.github.io\u002Farchive\u002Fmecanum\u002F\nhttps:\u002F\u002Fftcforum.usfirst.org\u002Fforum\u002Fftc-technology\u002Fandroid-studio\u002F6361-mecanum-wheels-drive-code-example\nhttps:\u002F\u002Fwww.tutorialspoint.com\u002Fjava\u002Fnumber_atan2.htm\nhttp:\u002F\u002Fthinktank.wpi.edu\u002Fresources\u002F346\u002FControllingMecanumDrive.pdf\n```"],"uses":{"params":["slug"]}}]}